.data
	tabuleiro:	.word   0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  #x=1 O=2 , linha1=0-2 linha 2=3-5 linha 3=6-8	
	newline_msg:	.asciiz "\n"
	player1_msg: .asciiz "P1:Digite uma posição(1-9): "
	player2_msg: .asciiz "P2:Digite uma posição(1-9): "
	infotabuleiro_msg: .asciiz "Legenda-> 0=Vazio, 1=X, 2=O\n"
	invalida_msg: .asciiz "Esta posicao esta fora do tabuleiro ou ja foi preenchida!\n"
	vencedor_msg: .asciiz "Ja existe vencedor?(0=Nao, 1=Sim) "
	quemvenceu_msg: .asciiz "Quem foi o vencedor(P1=1,P2=2) "
	player1win_msg: .asciiz "Player 1 venceu(+3 pontos) e o"
	player2win_msg: .asciiz "Player 2 venceu(+3 pontos) e o "
	player2zeropoints_msg: .asciiz "Player 2 continua com 0 pontos!\n"
	player1zeropoints_msg: .asciiz "Player 1 continua com 0 pontos!\n"
	limpartabuleiro_msg: .asciiz "O tabuleiro foi limpo\n"
	wronginput_msg: .asciiz "Input invalido\n"
	p1losepoints_msg: .asciiz "Player 1 perde um ponto!\n"
	p2losepoints_msg: .asciiz "Player 2 perde um ponto!\n"
	player1print_msg: .asciiz "Player 1-> "
	player2print_msg: .asciiz "Player 2-> "
	printpoints: .asciiz "Pontos: "
	printwins: .asciiz "\tVitorias: "
	pontosp1:	.word 0
	pontosp2:	.word 0
	winsp1:		.word 0
	winsp2:		.word 0
	njogadas:	.word 0
.text
main:
	la $s0, tabuleiro #Carrega o tabuleiro
	jal printtabuleiro
	jal printwinsandpoints
	jal player1
	

player1:
	#Imprime a label player1_msg
	li $v0,4
	la $a0,player1_msg
	syscall
	li $v0,5	#Scan da posição
	syscall
	addi $v0,$v0,-1	#remove 1, para poder ser de 1-9 e não de 0-8(input mais intuitivo)
	mul $t0,$v0,4	#multiplica por 4 por causa da memora c inteiros saltar de 4 em 4
	move $a0,$v0
	jal posicaovalida
	beq $v0,0,posinvalidap1
	li $t1,1 #t1=1=>x
	sw $t1, tabuleiro($t0)	#guarda na posição obtida do output 
	jal printtabuleiro
	jal checkvencedor
	j player2
	
posinvalidap1:
	li $v0,4
	la $a0, invalida_msg
	syscall
	j player1
	
player2:
	li $v0,4
	la $a0,player2_msg
	syscall
	li $v0,5
	syscall
	addi $v0,$v0,-1
	mul $t0,$v0,4
	move $a0,$v0
	jal posicaovalida
	beq $v0,0,posinvalidap2
	li $t1,2
	sw $t1, tabuleiro($t0)
	jal printtabuleiro
	jal checkvencedor
	j player1
	
posinvalidap2:
	li $v0,4
	la $a0, invalida_msg
	syscall
	j player2
	

#Verifica se a posição está dentro da matriz, e se não está ocupada(0=invalida, 1=valida)
posicaovalida:
	bgt $a0,8,invalida#se >8
	blt $a0,0,invalida#se <0
	lw $t6,tabuleiro($t0)#carrega para $t0 o valor do tabuleiro na posição para saber se está ocupado
	bne $t6,0,invalida#se for diferente de 0 está ocupado
	li $v0,1#se a posição for valida retorna 1
	jr $ra
	
invalida:
	li $v0,0#se a posição for invalida retorna 0
	jr $ra
		

#Dà print ao conteudo do tabuleiro
printtabuleiro:
		li $v0,4
		la $a0,infotabuleiro_msg
		syscall
		li $t0,0
	print:	
		beq $t0,36,endprint#36=4*9
		lw $t1,tabuleiro($t0)
		addi $t0,$t0,4
		li $v0,1
		move $a0,$t1
		syscall
		beq $t0,12,newline
		beq $t0,24,newline
		j print
	newline:
		li $v0,4
		la $a0,newline_msg
		syscall
		j print
		
	endprint:
		li $v0,4
		la $a0,newline_msg
		syscall
		jr $ra
checkvencedor:#para verificar se existe vencedor ou não
	li $v0,4
	la $a0,vencedor_msg	
	syscall
	li $v0,5	#Scan sim ou nao
	syscall	
	beq $v0,1, quemvenceu
	bne $v0,0,checkvencedor
	jr $ra
quemvenceu:
	li $v0,4
	la $a0 quemvenceu_msg
	syscall
	li $v0,5
	syscall
	beq $v0,1,player1win
	beq $v0,2,player2win
	li $v0,4
	la $a0,wronginput_msg
	syscall
	j quemvenceu
	
#se o player 1 ganhar
player1win:
	li $v0,4
	la $a0,player1win_msg
	syscall
	lw $t0,winsp1
	addi $t0,$t0,1
	sw $t0,winsp1
	lw $t0,pontosp1
	addi $t0,$t0,3
	sw $t0,pontosp1
	lw $t0,pontosp2
	beq $t0,0 p2zeropoints#se o player 1 não tiver nenhum ponto não se substrai
	li $v0,4
	la $a0, p2losepoints_msg
	syscall
	addi $t0,$t0,-1
	sw $t0,pontosp2
	j endpoints
p2zeropoints:
	li $v0,4
	la $a0,player2zeropoints_msg
	syscall
	j endpoints
	
	
#se o player2 ganhar
player2win:
	li $v0,4
	la $a0,player2win_msg
	syscall
	lw $t0,winsp2
	addi $t0,$t0,1
	sw $t0,winsp2
	lw $t0,pontosp2
	addi $t0,$t0,3
	sw $t0,pontosp2
	lw $t0,pontosp1
	beq $t0,0 p1zeropoints#se o player 1 não tiver nenhum ponto não se substrai
	li $v0,4
	la $a0, p1losepoints_msg
	syscall
	addi $t0,$t0,-1
	sw $t0,pontosp1
	j endpoints
p1zeropoints:
	li $v0,4
	la $a0,player1zeropoints_msg
	syscall
	j endpoints
endpoints:
	jal limpartabuleiro
	j player1
	
limpartabuleiro:
	li $v0,4
	la $a0,limpartabuleiro_msg
	syscall
	li $t0,0
loop1:	beq $t0,36,leave1
	lw $t1,tabuleiro($t0)
	addi $t1,$0,0
	sw $t1,tabuleiro($t0)
	addi $t0,$t0,4
	j loop1
leave1:
	addi $t0,$0,0
	sw $t0,njogadas #reset ao njogadas p zero
	jr $ra
#dá print das wins e dos pontos dos 2 players
printwinsandpoints:
	li $v0,4
	la $a0,player1print_msg
	syscall
	li $v0,4
	la $a0,printpoints
	syscall
	lw $t0, pontosp1
	li $v0,1
	move $a0,$t0
	syscall
	li $v0,4
	la $a0, printwins
	syscall
	lw $t0, winsp1
	li $v0,1
	move $a0,$t0
	syscall
	li $v0,4
	la $a0,newline_msg
	syscall
	li $v0,4
	la $a0,player1print_msg
	syscall
	li $v0,4
	la $a0,printpoints
	syscall
	lw $t0, pontosp2
	li $v0,1
	move $a0,$t0
	syscall
	li $v0,4
	la $a0, printwins
	syscall
	lw $t0, winsp2
	li $v0,1
	move $a0,$t0
	syscall
	li $v0,4
	la $a0,newline_msg
	syscall
	jr $ra

incrementnjogadas:#quando limpa o tabuleiro dá reset
	lw $t0, njogadas
	addi $t0,$t0,1
	sw $t0,njogadas
	jr $ra
	
	

	

	
	
	

	
	
