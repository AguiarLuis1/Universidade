1-
a)fork()-Muda o modo para modo kernel e cria um processo filho se for possivel
 wait(int status)-Faz uma saída normal do processo, leva como parâmetro um inteiro que indica o status
b)O primeiro valor que é imprimido é o do pai, isto acontece porque o filho é criado a partir do pai, logo é possivel saber-se o pid do pai
antes do pid do filho
2-
a)No wait espera-se por qualquer filho e no waitpid espera-se pelo filho com o pid indicado
b)
#include <stdio.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>

int main()
{
    int i;
    for(i=0;i<5;i++){
        pid_t pid=fork();
        if(pid==0){
        srandom(getpid());
        int r=random()%100;
        printf("Child: %d\n",r);
        exit(r);
        }else{
        int status;
        waitpid(pid,&status,0);
        printf("Parent: %d\n",WEXITSTATUS(status));
        }
    }
return 0;
}
3-
#include <stdio.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>

int main()
{
    int primes[]={0,1,2,3,5,7,11,13,17,19};
    pid_t pid1=fork();
    if(pid1==0){
    int i,sum1=0;
    for(i=0;i<10;i++){
        if(i%2==0){
            sum1+=primes[i];
            primes[i]=0;
        }
    }
    exit(sum1);
    }
    pid_t pid2=fork();
    if(pid2==0){
    int j,sum2=0;
    for(j=0;j<10;j++){
        if(j%2!=0){
            sum2+=primes[j];
            primes[j]=0;
        }
    }
    exit(sum2);
    }
    int result1;
    waitpid(pid1,&result1,0);
    printf("Child1: %d\n",WEXITSTATUS(result1));
     int result2;
    waitpid(pid2,&result2,0);
    printf("Child2: %d\n",WEXITSTATUS(result2));
    return 0;
}